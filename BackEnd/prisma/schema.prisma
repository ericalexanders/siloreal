
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String
  reviews         Review[]
  role            Role @relation(fields: [roleId], references: [id])
  roleId          Int
  refresh_tokens  refresh_tokens[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model refresh_tokens {
  id           String   @id @unique @default(uuid()) @db.Uuid
  updated_at   DateTime @default(now()) @db.Timestamptz(6)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  hashed_token String
  revoked      Boolean  @default(false)
  user_id      Int
  user         User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "refresh_tokens_ref_user_id")

  @@index([created_at], map: "refresh_tokens_created_at_index")
  @@index([user_id], map: "refresh_tokens_user_id_index")
}

model Review {
  id              Int         @id @default(autoincrement())
  title           String
  content         String
  rating          Int
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  movieId         Int
  movie           Movie       @relation(fields: [movieId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Movie {
  id              Int         @id @default(autoincrement())
  title           String
  img             String
  reviews         Review[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Role {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  users           User[]
  permissions     RolePermission[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Permission {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  roles           RolePermission[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model RolePermission {
  role            Role        @relation(fields: [roleId], references: [id])
  roleId          Int
  permission      Permission  @relation(fields: [permissionId], references: [id])
  permissionId    Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@id([roleId, permissionId])
}

// INICIO DE VISTAS

model UserPermissionsView {
  id            Int     @map("userId") @id
  name          String  @map("username")
  email         String  @map("email") @unique
  roleId        Int     @map("roleId")
  permissionIds Int[]   @map("permission_ids")

  @@map("user_permissions_view")
}
